---
# infoblox/playbooks/add/nios_zone.yml

# This playbook manages infoblox NIOS DNS zones in batches to avoid HTTP timeouts.
# It reads zone data from a JSON file, divides it into batches, and adds or modifies zones in batches.
# This version attempts to handle mutually exclusive parameters.

- name: Read DNS Zone from JSON file
  ansible.builtin.set_fact:
    nios_zone_desired: "{{ lookup('file', 'add/prod_changes/{{ grid_host }}/nios_zone.json') | from_json }}"

- name: Batch the DNS Zones into groups based on batch_size variable
  ansible.builtin.set_fact:
    batched_zones: "{{ nios_zone_desired | batch(batch_size) | list }}"

- name: Check if DNS Zone is present on server
  infoblox.nios_modules.nios_zone:
    provider: "{{ clean_provider }}"
    fqdn: "{{ item.fqdn }}"
    view: "{{ item.view | default('default') }}"
    state: present
  loop: "{{ nios_zone_desired }}"
  register: check_result
  ignore_errors: true

- name: Debug DNS Zone presence check results
  debug:
    var: check_result
  when: check_result is defined

- name: Ensure DNS Zones are present (Batched)
  infoblox.nios_modules.nios_zone:
    provider: "{{ clean_provider }}"
    fqdn: "{{ item.fqdn }}"
    comment: "{{ item.comment | default('') }}"
    extattrs: "{{ item.extattrs | default({}) }}"
    view: "{{ item.view | default('default') }}"
    zone_format: "{{ item.zone_format | default('FORWARD') }}"
    ns_group: "{{ item.ns_group | default(omit) }}"
    grid_primary: "{{ [{'name': item.grid_primary[0].name}] if item.grid_primary and item.grid_primary|length > 0 else omit }}"
    grid_secondaries: "{{ item.grid_secondaries | default(omit) }}"
    state: present
  loop: "{{ nios_zone_desired }}"
  register: add_result
  ignore_errors: true

- name: Display Add DNS Zones errors
  ansible.builtin.debug:
    var: add_result
  when: add_result is defined and 'failed' in add_result and add_result.failed

- name: Playbook completed
  ansible.builtin.debug:
    msg: "Playbook completed: DNS Zones process completed."
